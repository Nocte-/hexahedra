//---------------------------------------------------------------------------
/// \file   client/vao.hpp
/// \brief  An OpenGL vertex array object
//
// This file is part of Hexahedra.
//
// Hexahedra is free software; you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// Copyright 2012-2013, nocte@hippie.nu
//---------------------------------------------------------------------------

#pragma once

#include <boost/utility.hpp>
#include <GL/glew.h>
#include <GL/gl.h>

#include <hexa/basic_types.hpp>

#include "vbo.hpp"

namespace hexa {
namespace gl {

/// An OpenGL VAO
class vao : boost::noncopyable
{
public:
    vao();
    vao(const void* data, size_t count, size_t vertex_size);

    vao(vao&& move)
        : vao_id_   (move.vao_id_)
        , vbo_      (std::move(move.vbo_))
    {
        move.vao_id_ = 0;
    }

    vao& operator= (vao&& move);

    ~vao();

    /// The ID that was generated by the OpenGL driver.
    GLuint  id() const              { return vao_id_; }

    /// The ID of the underlying vertex buffer object.
    GLuint  vbo_id() const          { return vbo_.id(); }

    /// The number of vertices in the array.
    size_t  vertex_count() const    { return vbo_.vertex_count(); }

    /// Draw this VAO.
    void    draw() const;

    void    bind() const;
    static void unbind();

private:
    /// The ID of the vertex array, as given by glGenVertexArrays()
    GLuint  vao_id_;

    /// The VBO we're using to store the geometry
    vbo     vbo_;
};

}} // namespace hexa::gl

